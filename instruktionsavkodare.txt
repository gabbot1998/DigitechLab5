----------------------------------------------------------------------------------
-- Namn:        instruktionsavkodare
-- Filnamn:     instruktionsavkodare.vhd
-- Testbench:   instruktionsavkodare_tb.vhd
--
-- Insignaler:
--      OPCODE - operationskod från instruktionen
--      Z      - zero-flagga från beräkningsenhet
--
-- Utsignaler:
--      StackOp - styr stacken i adressväljaren
--      AddrSrc - styr varifrån nästa adress ska hämtas
--      ALUOp   - bestämmer operatinen för ALU i beräkningsenhet
--      ALUSrc  - väljer om ett register eller insignalen från IO-blocket ska 
--                vara operand till ALU
--      RegEna  - laddsignal till registerblocket
--      OutEna  - laddsignal till utsignalsregistret i IO-blocket
----------------------------------------------------------------------------------

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

library work;
use work.all;
use work.cpu_pkg.all;

entity instruktionsavkodare is
    port(
        OPCODE : in std_logic_vector(3 downto 0);
        Z : in std_logic;
        StackOp : out std_logic_vector(1 downto 0);
        AddrSrc : out std_logic_vector(1 downto 0);
        ALUOp : out std_logic_vector(2 downto 0);
        ALUSrc : out std_logic;
        RegEna : out std_logic;
        OutEna : out std_logic
    );
end entity;

architecture behaviour of instruktionsavkodare is
    -- Kanske måste ha med defaultvärden i when satser. Fråga på labben.
    -- kanske... Syntaxfel någonstans.
begin
    process(OPCODE) begin
    OutEna <= '0';
    RegEna <= '0';
    StackOp <= STACK_OP_HOLD;
    AddrSrc <= ADDR_PC_PLUS_ONE;
    ALUSrc <= '0';
    ALUOp <= "000";
    
    case OPCODE is
        when OPCODE_CALL => 
            StackOp <= STACK_OP_PUSH;
            AddrSrc <= ADDR_DATA;
        
        when OPCODE_RET =>
            StackOp <= STACK_OP_POP;
            AddrSrc <= ADDR_TOS;
        
        when OPCODE_BZ =>
            ALUOp <= "001";
            ALUSrc <= '0';
            if (Z = '1') then 
                AddrSrc <= ADDR_DATA;  
            elsif Z = '0' then
                AddrSrc <= ADDR_PC_PLUS_ONE;
            end if;    
        
        when OPCODE_B =>
            AddrSrc <= ADDR_DATA;
            
        when OPCODE_ADD => 
            ALUOp <= "010"; -- 010 code for add in ALU
            ALUSrc <= '0'; -- 0 is the code for ALUSrc RegOut
            RegEna <= '1'; 
            
        when OPCODE_SUB => 
               ALUOp <= "011"; -- 011 code for sub in ALU
               ALUSrc <= '0'; -- 0 is the code for ALUSrc RegOut
               RegEna <= '1';
               
        when OPCODE_LD =>
            ALUOp <= "000"; -- 000 is the code for A in ALU
            RegEna <= '1';
            
        when OPCODE_IN => 
            ALUSrc <= '1';
            ALUOp <= "001";
            RegEna <= '1';
        
        when OPCODE_OUT =>
            ALUSrc <= '0';
            ALUOp <= "001";
            OutEna <= '1';            
                  
        when OPCODE_AND => 
              ALUOp <= "100"; -- 100 code for and in ALU
              ALUSrc <= '0'; -- 0 is the code for ALUSrc RegOut
              RegEna <= '1';   
              
        when OPCODE_RETDATA =>
              ALUOp <= "000";
              AddrSrc <= ADDR_DATA;
        
        when others => ALUOp <= "000";      
                                 
    end case;
    end process;        
end architecture;
